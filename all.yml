---
- name: Initial system setup
  hosts: 127.0.0.1
  connection: local
  vars:
    username: felix
  tasks:

  - name: Install basic programms and libraries
    apt: pkg="{{ item }}" state=present update_cache=true
    become: true
    with_items:
      - zsh
      - vim
      - nano
      - curl
      - unzip
      - tar
      - wget
      - ntp
      - tmux
      - git
      - subversion
      - build-essential
      - gcc
      - g++
      - python2.7
      - python3.6
      - python-pip
      - openjdk-8-jdk
      - openjdk-8-jre
      - htop
      - mtr-tiny
      - parted
      - imagemagick
      - ant
      - gradle
      - maven
      - autoconf
      - automake
      - make
      - ruby
      - scala
      - clang
      - clisp
      - cmake
      - cmatrix
      - cowsay
      - cowsay-off
      - docker.io
      - erlang-base
      - ffmpeg
      - findbugs
      - fortunes
      - fortunes-off
      - httpie
      - iftop
      - iotop
      - mono-runtime
      - neofetch
      - nmap
      - tree
      - unzip
      - vagrant
      - valgrind
      - avra
      - avrdude
      - avr-libc
      - binutils-avr
      - gcc-avr
      - libssl-dev
      - pkg-config
      - cmake
      - zlib1g-dev
      - command-not-found
      - fonts-lmodern
      - fonts-open-sans
      - texlive
      - texlive-base
      - latexmk
      - biber
      - texlive-bibtex-extra
      - texlive-lang-german
      - libpq5
      - libpq-dev
      - libmysqlclient20
      - libmysqlclient-dev
      - libsqlite3-0
      - libsqlite3-dev
      - luajit
      - ytnef-tools
      - powertop
      - gdb-multiarch
      - minicom
      - openocd
      - pv
      - iperf
      - linux-tools-common
      - moreutils
      - libasound2
      - libasound2-dev
      - musl-tools
      - pandoc
      - wkhtmltopdf
      - libgnome-keyring-common
      - libgnome-keyring0

  - name: Clone oh-my-zsh
    tags:
      # Suppress warning: [ANSIBLE0006] git used in place of git module
      # Git module doesn't allow us to set `core.autocrlf=input`.
      - skip_ansible_lint
    # core.autocrlf=input prevents https://github.com/robbyrussell/oh-my-zsh/issues/4402
    command: "git clone -c core.autocrlf=input --depth=1 https://github.com/robbyrussell/oh-my-zsh.git ~{{ username }}/.oh-my-zsh"
    args:
      creates: "~{{ username }}/.oh-my-zsh"

  - name: Clone zsh-autosuggestions
    git:
      repo: "https://github.com/zsh-users/zsh-autosuggestions.git"
      dest: "~{{ username }}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"

  - name: Clone zsh-syntax-highlightling
    git:
      repo: "https://github.com/zsh-users/zsh-syntax-highlighting.git"
      dest:  "~{{ username }}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"

  - name: Set default shell
    become: true
    user: name="{{ username }}" shell=/bin/zsh


  - name: Install rustup
    shell: "curl https://sh.rustup.rs -sSf | sh -s -- -y"
    args:
      creates: "~{{ username }}/.rustup"

  - name: Install Rust stable
    shell: "~{{ username }}/.cargo/bin/rustup install stable"

  - name: Install Rust nightly
    shell: "~{{ username }}/.cargo/bin/rustup install nightly"
    ignore_errors: true

  - name: Install Rust additional targets
    shell: "~{{ username }}/.cargo/bin/rustup target add {{ item }}"
    with_items:
      - wasm32-unknown-unknown
      - thumbv7em-none-eabihf
      - x86_64-unknown-linux-musl

  - name: Install Rust additional targets for nightly
    shell: "~{{ username }}/.cargo/bin/rustup target add --toolchain nightly {{ item }}"
    with_items:
      - wasm32-unknown-unknown
      - thumbv7em-none-eabihf
      - x86_64-unknown-linux-musl
    ignore_errors: true

  - name: Install Rust components
    shell: "~{{ username }}/.cargo/bin/rustup component add {{ item }}"
    with_items:
       - rls-preview
       - rust-analysis
       - rust-src
       - rustfmt-preview
       - clippy
       - llvm-tools-preview

  - name: Update Rust
    shell: "~{{ username }}/.cargo/bin/rustup update"
    ignore_errors: true

  # This compiles from source and can take some time
  - name: Install cargo programms
    shell: "~{{ username }}/.cargo/bin/cargo install {{ item }}"
    args:
      creates: "~{{ username }}/.cargo/bin/{{ item }}"
    with_items:
      - cargo-add
      - cargo-audit
      - cargo-deb
      - cargo-profiler
      - comment-strip
      - exa
      - xargo
      - bat
      - wasm-pack

  - name: Install nightly cargo programs
    shell: "~{{ username }}/.cargo/bin/cargo +nightly install {{ item }}"
    args:
      creates: "~{{ username }}/.cargo/bin/{{item}}"
    with_items:
      - racer

  - name: Install diesel_cli
    shell: "~{{ username }}/.cargo/bin/cargo install diesel_cli"
    args:
      creates: "~{{ username }}/.cargo/bin/diesel"

  - name: Install cargo tarpaulin
    shell: 'RUSTFLAGS="--cfg procmacro2_semver_exempt" ~{{ username }}/.cargo/bin/cargo +nightly install cargo-tarpaulin'
    args:
      creates: "~{{ username }}/.cargo/bin/cargo-tarpaulin"

  - name: Install itmdump
    shell: "~{{ username }}/.cargo/bin/cargo install itm --vers 0.3.1"
    args:
      creates: "~{{ username }}/.cargo/bin/itmdump"

  - name: Install cargo binutils
    shell: "~{{ username }}/.cargo/bin/cargo install cargo-binutils --vers 0.1.4"
    args:
      creates: "~{{ username }}/.cargo/bin/cargo-size"

  - name: Set udev rules for USB to Serial
    become: true
    copy:
      dest: "/etc/udev/rules.d/99-ftdi.rules"
      content: |
        # FT232 - USB <-> Serial Converter
        ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", MODE:="0666"

  - name: Set udev rules for openocd
    become: true
    copy:
      dest: "/etc/udev/rules.d/99-openocd.rules"
      owner: root
      content: |
        # STM32F3DISCOVERY rev A/B - ST-LINK/V2
        ATTRS{idVendor}=="0483", ATTRS{idProduct}=="3748", MODE:="0666"
        # STM32F3DISCOVERY rev C+ - ST-LINK/V2-1
        ATTRS{idVendor}=="0483", ATTRS{idProduct}=="374b", MODE:="0666"

  - name: Reload udev rules
    become: true
    shell: "udevadm control --reload-rules"


  - name: Fix user groups for docker and ttys
    become: true
    user:
      name: "{{ username }}"
      groups:
        - docker
        - dialout
      append: true

  - name: Install docker-compose
    get_url:
      url: "https://github.com/docker/compose/releases/download/1.21.2/docker-compose-Linux-x86_64"
      dest: "/usr/local/bin/docker-compose"
      force: false
      mode: 0755
    become: true


  - name: Clone nvm
    git:
      repo: "https://github.com/creationix/nvm.git"
      dest:  "~{{ username }}/.nvm/"

  - name: Install node latest lts
    shell: 'export NVM_DIR="$HOME/.nvm"; echo "NVM_DIR: $NVM_DIR"; [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"; echo "NVM LOADED"; nvm install 8 --lts --latest-npm --no-progress;'

  - name: Add yarn apt key
    apt_key:
      url: "https://dl.yarnpkg.com/debian/pubkey.gpg"
    become: true

  - name: Add yarn repo list
    copy:
      content: "deb https://dl.yarnpkg.com/debian/ stable main"
      dest: /etc/apt/sources.list.d/yarn.list
    become: true

  - name: Install yarn
    apt:
      pkg: "yarn"
      state: present
      update_cache: true
      install_recommends: false
    become: true


  - name: Create font directory
    file:
      path: "~{{ username }}/.local/share/fonts"
      state: directory
      mode: 0755

  - name: Install Fira Code font
    get_url:
      url: "https://github.com/tonsky/FiraCode/blob/master/distr/ttf/FiraCode-{{ item }}.ttf?raw=true"
      dest: "~{{ username }}/.local/share/fonts/FiraCode-{{ item }}.ttf"
      force: false
    with_items:
      - Bold
      - Light
      - Medium
      - Regular
      - Retina


  - name: Install Source Code Pro
    get_url:
      url: "https://github.com/adobe-fonts/source-code-pro/releases/download/variable-fonts/SourceCodeVariable-{{ item }}.ttf"
      dest: "~{{ username }}/.local/share/fonts/SourceCodeVariable-{{ item }}.ttf"
      force: false
    with_items:
      - Roman
      - Italic

  - name: Update font cache
    shell: "fc-cache -f"
    become: true


  - name: Create icons directory
    file:
      path: "~{{ username }}/.icons"
      state: directory
      mode: 0755

  - name: Check if Flat Remix icons are present
    stat:
      path: "~{{ username }}/.icons/Flat-Remix"
    register: flat_remix

  - name: Clone Flat Remix icons
    git:
      repo: "https://github.com/daniruiz/flat-remix.git"
      dest: "/tmp/flat-remix"
    when: flat_remix.stat.exists == False

  - name: Install Flat Remix icons
    shell: "cp -r /tmp/flat-remix/Flat-Remix* ~{{ username }}/.icons/"
    when: flat_remix.stat.exists == False


  - name: Create themes directory
    file:
      path: "~{{ username }}/.themes"
      state: directory
      mode: 0755

  - name: Clone Flatabulous theme
    git:
      repo: "https://github.com/anmoljagetia/Flatabulous.git"
      dest: "~{{ username }}/.themes/Flatabulous"

  - name: Clone X-Arc-Darker theme
    git:
      repo: "https://gitlab.com/LinxGem33/X-Arc-Darker.git"
      dest: "~{{ username }}/.themes/X-Arc-Darker"

  - name: Clone X-Arc-White theme
    git:
      repo: "https://gitlab.com/LinxGem33/X-Arc-White.git"
      dest: "~{{ username }}/.themes/X-Arc-White"

  - name: Install other themes
    apt: pkg="{{ item }}" state=present update_cache=true
    become: true
    with_items:
      - arc-theme
      - dmz-cursor-theme

  - name: Install basic GUI programms
    apt: pkg="{{ item }}" state=present update_cache=true
    become: true
    with_items:
      - firefox
      - thunderbird
      - chromium-browser
      - pinta
      - gimp
      - inkscape
      - transmission
      - transmission-cli
      - zenmap
      - filezilla
      - darktable
      - wine1.6
      - winetricks
      - playonlinux
      - netbeans
      - gparted
      - vlc
      - wireshark
      - deja-dup
      - libreoffice
      - rofi
      - xarchiver
      - conky
      - gramps


  - name: Check if VS Code is installed
    command: dpkg-query -W code
    register: code_deb
    failed_when: code_deb.rc > 1
    changed_when: code_deb.rc == 1

  - name: Download VS Code
    get_url:
      url: "https://go.microsoft.com/fwlink/?LinkID=760868"
      dest: "/tmp/code.deb"
    when: code_deb.rc == 1

  - name: Install VS Code
    apt: deb="/tmp/code.deb"
    become: true
    when: code_deb.rc == 1


  - name: Check if Gitkraken is installed
    command: dpkg-query -W gitkraken
    register: gitkraken_deb
    failed_when: gitkraken_deb.rc > 1
    changed_when: gitkraken_deb.rc == 1

  - name: Download Gitkraken
    get_url:
      url: "https://release.gitkraken.com/linux/gitkraken-amd64.deb"
      dest: "/tmp/gitkraken.deb"
    when: gitkraken_deb.rc == 1

  - name: Install Gitkraken
    apt: deb="/tmp/gitkraken.deb"
    become: true
    when: gitkraken_deb.rc == 1


  - name: Check if Steam is installed
    command: dpkg-query -W steam
    register: steam_deb
    failed_when: steam_deb.rc > 1
    changed_when: steam_deb.rc == 1

  - name: Download Steam
    get_url:
      url: "https://steamcdn-a.akamaihd.net/client/installer/steam.deb"
      dest: "/tmp/steam.deb"
    when: steam_deb.rc == 1

  - name: Install Steam
    apt: deb="/tmp/steam.deb"
    become: true
    when: steam_deb.rc == 1


  - name: Create optional and optional binary directory
    file:
      path: "~{{ username }}/.opt/bin"
      state: directory
      mode: 0755

  - name: Install archillect load
    git:
      repo: "git@github.com:XOSplicer/archillect-load.git"
      dest: "~{{ username }}/.opt/archillect-load"

  - name: Link archillect load
    file:
      path: "~{{ username }}/.opt/bin/archillect-bg"
      src: "~{{ username }}/.opt/archillect-load/run_feh.sh"
      state: link

  - name: Clone wrk
    git:
      repo: "https://github.com/wg/wrk.git"
      dest: "~{{ username }}/.opt/wrk"
      version: "4.1.0"

  - name: Compile wrk
    make:
      chdir: "~{{ username }}/.opt/wrk"

  - name: Link wrk
    file:
      path: "~{{ username }}/.opt/bin/wrk"
      src: "~{{ username }}/.opt/wrk/wrk"
      state: link

  - name: Fix apt dependencies
    shell: "apt-get --fix-broken install"
    become: true

